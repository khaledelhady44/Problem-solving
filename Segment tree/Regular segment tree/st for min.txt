 
struct Node{
    int mn;
    Node(){
        mn = 2e9;
    }
    Node(int x) {
        mn = x;
    }
    void change(int x){
        mn = x;
    }
};
 
struct SegTree{
    int tree_size;
    vector<Node> SegData;
 
    SegTree(int n){
        tree_size = 1;
        while(tree_size < n) tree_size *= 2;
        SegData.assign(2*tree_size, Node());
    }
 
    Node merge(Node &lf, Node &ri){
        Node ans = Node();
        ans.mn = min(lf.mn, ri.mn);
        return ans;
    }
 
    void set(int idx, int val, int ni, int lx, int rx){
        int mid = (rx + lx) / 2;
 
        if(rx - lx == 1)
        {
            SegData[ni].change(val);
            return;
        }
        if (idx < mid)
        {
            set(idx, val, 2*ni+1, lx, mid);
        }
        else
        {
            set(idx, val, 2*ni+2, mid, rx);
        }
 
        SegData[ni] = merge(SegData[2*ni+1], SegData[2*ni+2]);
    }
 
    void set(int idx, int val){
        set(idx, val, 0, 0, tree_size);
    }
 
    Node get(int l, int r, int ni, int lx, int rx){
        int mid = (rx + lx) / 2;
        if(lx >= l && rx <= r)
            return SegData[ni];
        if(lx >= r || rx <= l)
            return Node();
 
        Node lf = get(l, r, 2*ni+1, lx, mid);
        Node ri = get(l, r, 2*ni+2, mid, rx);
 
        return merge(lf, ri);
    }
 
    int get(int l, int r){
        return get(l, r, 0, 0, tree_size).mn;
    }
 
};